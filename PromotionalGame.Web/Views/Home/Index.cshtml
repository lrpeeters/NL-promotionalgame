<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scratchboard Game</title>
    <style>
        .box {
            width: 100px; /* Box width */
            height: 100px; /* Box height */
            margin: 5px; /* Space between boxes */
            display: inline-block; /* Display boxes inline */
            background-color: #f0f0f0; /* Light grey background */
            border: 1px solid #ddd; /* Light grey border */
            text-align: center; /* Center text */
            vertical-align: top; /* Align text to top */
            line-height: 100px; /* Center text vertically */
        }

        .grandPrize {
            background-color: gold;
        }

        .consolationPrize {
            background-color: silver;
        }

        .scratched {
            background-color: blue; /* Color for scratched boxes */
        }

        #emailInputContainer {
            margin-bottom: 20px; /* Space between the email input and the scratchboard */
        }
    </style>
</head>
<body>
    <div id="emailInputContainer">
        <input type="email" id="emailAddress" placeholder="Enter your email address" required>
    </div>

    <div id="scratchboard"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            async function loadScratchboard() {
                try {
                    const response = await fetch('https://localhost:7037/api/PromotionalGame');
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.json();
                    const scratchboardContainer = document.getElementById('scratchboard');
                    scratchboardContainer.innerHTML = ''; // Clear existing content

                    // Assuming 'data' contains an array of fields, and each field has an 'id' property
                    data.content.fields.forEach(field => {
                        const box = document.createElement('div');
                        box.className = 'box';
                        box.setAttribute('data-field-id', field.id); // Store the field ID in the box

                        // Check if the field is scratched and apply the 'scratched' class if true
                        if (field.isScratched) {
                            box.classList.add('scratched');
                        }

                        box.addEventListener('click', function () { handleBoxClick(this); }); // Adding a click event listener
                        scratchboardContainer.appendChild(box);
                    });
                } catch (error) {
                    console.error('Failed to load scratchboard:', error);
                }
            }

            async function handleBoxClick(boxElement) {
                const fieldId = boxElement.getAttribute('data-field-id');
                const emailAddress = document.getElementById('emailAddress').value;

                if (!emailAddress) {
                    alert("Please enter a valid email address.");
                    return;
                }

                try {
                    const response = await fetch(`https://localhost:7037/api/PromotionalGame/fields/${fieldId}/users/${encodeURIComponent(emailAddress)}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            // Include any additional headers your API requires
                        },
                        // If your API expects a request body, include it here. For this endpoint, the necessary data is in the URL.
                    });

                    if (!response.ok) {
                        // Assuming the error message is in the response body as plain text or JSON with an 'errorMessage' field
                        let errorMessage = "An unknown error occurred.";
                        const contentType = response.headers.get("content-type");
                        if (contentType && contentType.indexOf("application/json") !== -1) {
                            const errorData = await response.json();
                            errorMessage = errorData.errorMessage || "An error occurred, but no message was provided.";
                        } else {
                            errorMessage = await response.text();
                        }
                        throw new Error(errorMessage);
                    }

                    const data = await response.json();
                    // Remove any existing prize-related classes
                    boxElement.classList.remove('grandPrize', 'consolationPrize', 'scratched');

                    // Apply the appropriate class based on the prize
                    if (data.content === 0) {
                        boxElement.classList.add('grandPrize');
                        alert('Hurray, you won the Grand Prize. Lucky you!');
                    } else if (data.content === 1) {
                        boxElement.classList.add('consolationPrize');
                        alert('Hurray! It may not be what you are hoping for, but you still won a Consolation Prize. Lucky you!');
                    } else {
                        loadScratchboard();
                    }

                    // After 10 seconds, change the class to 'scratched'
                    setTimeout(() => {
                        // After a successful scratch, reload the scratchboard
                        loadScratchboard();
                    }, 15000); // 10000 milliseconds = 10 seconds

                } catch (error) {
                    console.error("Failed to scratch field:", error);
                    alert(error);
                    // Handle errors, such as displaying a message to the user
                }
            }

            loadScratchboard();
        });
    </script>

</body>
</html>
